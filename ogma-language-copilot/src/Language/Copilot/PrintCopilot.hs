-- File generated by the BNF Converter (bnfc 2.9.4.1).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for PrintCopilot.

module Language.Copulot.Pretty where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified Language.Copilot.AST as AbsCopilot

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsCopilot.Ident where
  prt _ (AbsCopilot.Ident i) = doc $ showString i
instance Print AbsCopilot.SYMBOL where
  prt _ (AbsCopilot.SYMBOL i) = doc $ showString i
instance Print AbsCopilot.VBOOL where
  prt _ (AbsCopilot.VBOOL i) = doc $ showString i
instance Print AbsCopilot.VFLOAT where
  prt _ (AbsCopilot.VFLOAT i) = doc $ showString i
instance Print AbsCopilot.VINT where
  prt _ (AbsCopilot.VINT i) = doc $ showString i
instance Print AbsCopilot.OPOne where
  prt _ (AbsCopilot.OPOne i) = doc $ showString i
instance Print AbsCopilot.OPTwo where
  prt _ (AbsCopilot.OPTwo i) = doc $ showString i
instance Print AbsCopilot.OPThree where
  prt _ (AbsCopilot.OPThree i) = doc $ showString i
instance Print [AbsCopilot.Def' a] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print (AbsCopilot.Def' a) where
  prt i = \case
    AbsCopilot.Def _ defsignatureopt defbody -> prPrec i 0 (concatD [prt 0 defsignatureopt, prt 0 defbody])

instance Print (AbsCopilot.DefSignatureOpt' a) where
  prt i = \case
    AbsCopilot.DefSignatureOptNothing _ -> prPrec i 0 (concatD [])
    AbsCopilot.DefSignatureOptJust _ id_ type_ -> prPrec i 0 (concatD [prt 0 id_, doc (showString "::"), prt 0 type_])

instance Print (AbsCopilot.Type' a) where
  prt i = \case
    AbsCopilot.PlainType _ id_ -> prPrec i 0 (concatD [doc (showString "Stream"), prt 0 id_])
    AbsCopilot.ArrayType _ vint -> prPrec i 0 (concatD [doc (showString "Stream"), doc (showString "("), doc (showString "Array"), doc (showString "'"), prt 0 vint, doc (showString ")")])

instance Print (AbsCopilot.DefBody' a) where
  prt i = \case
    AbsCopilot.MkDef _ id_ ids stream localdefs -> prPrec i 0 (concatD [prt 0 id_, prt 0 ids, doc (showString "="), prt 0 stream, prt 0 localdefs])

instance Print [AbsCopilot.Ident] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print (AbsCopilot.LocalDefs' a) where
  prt i = \case
    AbsCopilot.LocalDefNothing _ -> prPrec i 0 (concatD [])
    AbsCopilot.LocalDefJust _ deflist -> prPrec i 0 (concatD [doc (showString "where"), prt 0 deflist])

instance Print (AbsCopilot.DefList' a) where
  prt i = \case
    AbsCopilot.DefList0 _ -> prPrec i 0 (concatD [])
    AbsCopilot.DefListN _ deflist def -> prPrec i 0 (concatD [prt 0 deflist, doc (showString ";"), prt 0 def])

instance Print (AbsCopilot.Stream' a) where
  prt i = \case
    AbsCopilot.StreamPar _ stream -> prPrec i 0 (concatD [doc (showString "("), prt 0 stream, doc (showString ")")])
    AbsCopilot.StreamIdent _ id_ -> prPrec i 0 (concatD [prt 0 id_])
    AbsCopilot.ConstStream _ value -> prPrec i 0 (concatD [doc (showString "constant"), doc (showString "("), prt 0 value, doc (showString ")")])
    AbsCopilot.ExternStream _ str samplev -> prPrec i 0 (concatD [doc (showString "extern"), printString str, prt 0 samplev])
    AbsCopilot.StreamAppend _ valuelist stream -> prPrec i 0 (concatD [prt 0 valuelist, doc (showString "++"), prt 0 stream])
    AbsCopilot.StreamDrop _ vint stream -> prPrec i 0 (concatD [doc (showString "drop"), doc (showString "("), prt 0 vint, doc (showString ")"), prt 0 stream])
    AbsCopilot.StreamOP1 _ opone stream -> prPrec i 0 (concatD [prt 0 opone, prt 0 stream])
    AbsCopilot.StreamOP2 _ stream1 optwo stream2 -> prPrec i 0 (concatD [prt 0 stream1, prt 0 optwo, prt 0 stream2])
    AbsCopilot.StreamOP3 _ opthree stream1 stream2 stream3 -> prPrec i 0 (concatD [prt 0 opthree, prt 0 stream1, prt 0 stream2, prt 0 stream3])
    AbsCopilot.StreamStruct _ stream id_ -> prPrec i 0 (concatD [prt 0 stream, doc (showString "#"), prt 0 id_])

instance Print (AbsCopilot.SampleV' a) where
  prt i = \case
    AbsCopilot.SampleVNothing _ -> prPrec i 0 (concatD [doc (showString "Nothing")])
    AbsCopilot.SampleVJust _ valuelist -> prPrec i 0 (concatD [doc (showString "("), doc (showString "Just"), prt 0 valuelist, doc (showString ")")])

instance Print (AbsCopilot.ValueList' a) where
  prt i = \case
    AbsCopilot.MkValueList _ values -> prPrec i 0 (concatD [doc (showString "["), prt 0 values, doc (showString "]")])

instance Print [AbsCopilot.Value' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [doc (showString "("), prt 0 x, doc (showString ")")]
  prt _ (x:xs) = concatD [doc (showString "("), prt 0 x, doc (showString ")"), doc (showString ","), prt 0 xs]

instance Print (AbsCopilot.Value' a) where
  prt i = \case
    AbsCopilot.ValueBool _ vbool -> prPrec i 0 (concatD [prt 0 vbool])
    AbsCopilot.ValueFloat _ vfloat -> prPrec i 0 (concatD [prt 0 vfloat])
    AbsCopilot.ValueInt _ vint -> prPrec i 0 (concatD [prt 0 vint])
    AbsCopilot.ValueArray _ valuelist -> prPrec i 0 (concatD [doc (showString "array"), prt 0 valuelist])
    AbsCopilot.ValueUID _ id_ fields -> prPrec i 0 (concatD [prt 0 id_, prt 0 fields])

instance Print [AbsCopilot.Field' a] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print (AbsCopilot.Field' a) where
  prt i = \case
    AbsCopilot.MkField _ value -> prPrec i 0 (concatD [doc (showString "("), doc (showString "Field"), doc (showString "("), prt 0 value, doc (showString ")"), doc (showString ")")])

instance Print (AbsCopilot.CopilotModule' a) where
  prt i = \case
    AbsCopilot.CopilotModule _ imports defs -> prPrec i 0 (concatD [prt 0 imports, prt 0 defs])

instance Print [AbsCopilot.Import' a] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print (AbsCopilot.Import' a) where
  prt i = \case
    AbsCopilot.Import _ qualifiedopt id_ asqopt impsspecopt -> prPrec i 0 (concatD [doc (showString "import"), prt 0 qualifiedopt, prt 0 id_, prt 0 asqopt, prt 0 impsspecopt])

instance Print (AbsCopilot.ImpsSpecOpt' a) where
  prt i = \case
    AbsCopilot.NoImpsSpec _ -> prPrec i 0 (concatD [])
    AbsCopilot.HidingImp _ importelems -> prPrec i 0 (concatD [doc (showString "hiding"), doc (showString "("), prt 0 importelems, doc (showString ")")])
    AbsCopilot.ExplImp _ importelems -> prPrec i 0 (concatD [doc (showString "("), prt 0 importelems, doc (showString ")")])

instance Print (AbsCopilot.QualifiedOpt' a) where
  prt i = \case
    AbsCopilot.NoQual _ -> prPrec i 0 (concatD [])

instance Print (AbsCopilot.Qualifiedopt' a) where
  prt i = \case
    AbsCopilot.Qual _ -> prPrec i 0 (concatD [doc (showString "qualified")])

instance Print (AbsCopilot.AsQOpt' a) where
  prt i = \case
    AbsCopilot.NoAsQ _ -> prPrec i 0 (concatD [])
    AbsCopilot.AsQ _ id_ -> prPrec i 0 (concatD [doc (showString "as"), prt 0 id_])

instance Print (AbsCopilot.ImportElem' a) where
  prt i = \case
    AbsCopilot.ImportElem _ id_ conelemsopt -> prPrec i 0 (concatD [prt 0 id_, prt 0 conelemsopt])

instance Print [AbsCopilot.ImportElem' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (AbsCopilot.ConElemsOpt' a) where
  prt i = \case
    AbsCopilot.NoElem _ -> prPrec i 0 (concatD [])
    AbsCopilot.ConElemAll _ -> prPrec i 0 (concatD [doc (showString "(..)")])
    AbsCopilot.ConElemSome _ vars -> prPrec i 0 (concatD [doc (showString "("), prt 0 vars, doc (showString ")")])

instance Print [AbsCopilot.Var' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (AbsCopilot.Var' a) where
  prt i = \case
    AbsCopilot.VarId _ id_ -> prPrec i 0 (concatD [prt 0 id_])
    AbsCopilot.VarSym _ symbol -> prPrec i 0 (concatD [prt 0 symbol])
