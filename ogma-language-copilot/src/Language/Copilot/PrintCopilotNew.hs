-- Copyright 2021 United States Government as represented by the Administrator
-- of the National Aeronautics and Space Administration. All Rights Reserved.
--
-- Disclaimers
--
-- No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY
-- OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT
-- LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO
-- SPECIFICATIONS, ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
-- PARTICULAR PURPOSE, OR FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE
-- SUBJECT SOFTWARE WILL BE ERROR FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF
-- PROVIDED, WILL CONFORM TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN
-- ANY MANNER, CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR
-- RECIPIENT OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR
-- ANY OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE. FURTHER,
-- GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING
-- THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES
-- IT "AS IS."
--
-- Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST
-- THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS
-- ANY PRIOR RECIPIENT. IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN
-- ANY LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
-- INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
-- USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
-- UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
-- PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW. RECIPIENT'S SOLE REMEDY
-- FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
-- AGREEMENT.
--
{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for Language.
--   Generated by the BNF converter.

module Language.Copilot.PrintCopilotNew where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, dropWhile, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified Language.Copilot.AbsCopilot

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i = \case
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    [";"]        -> showChar ';'
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i     = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt     _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Language.Copilot.AbsCopilot.Ident where
  prt _ (Language.Copilot.AbsCopilot.Ident i) = doc $ showString i
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Language.Copilot.AbsCopilot.VBOOL where
  prt _ (Language.Copilot.AbsCopilot.VBOOL i) = doc $ showString i

instance Print Language.Copilot.AbsCopilot.VFLOAT where
  prt _ (Language.Copilot.AbsCopilot.VFLOAT i) = doc $ showString i

instance Print Language.Copilot.AbsCopilot.VINT where
  prt _ (Language.Copilot.AbsCopilot.VINT i) = doc $ showString i

instance Print Language.Copilot.AbsCopilot.OPOne where
  prt _ (Language.Copilot.AbsCopilot.OPOne i) = doc $ showString i

instance Print Language.Copilot.AbsCopilot.OPTwo where
  prt _ (Language.Copilot.AbsCopilot.OPTwo i) = doc $ showString i

instance Print Language.Copilot.AbsCopilot.OPThree where
  prt _ (Language.Copilot.AbsCopilot.OPThree i) = doc $ showString i

instance Print [Language.Copilot.AbsCopilot.Def] where
  prt = prtList

instance Print Language.Copilot.AbsCopilot.TypedDef where
  prt i = \case
    Language.Copilot.AbsCopilot.TypedDef defsignatureopt defbody -> prPrec i 0 (concatD [prt 0 defsignatureopt, prt 0 defbody])

instance Print Language.Copilot.AbsCopilot.DefSignatureOpt where
  prt i = \case
    Language.Copilot.AbsCopilot.DefSignatureOptNothing -> prPrec i 0 (concatD [])
    Language.Copilot.AbsCopilot.DefSignatureOptJust id_ type_ -> prPrec i 0 (concatD [prt 0 id_, doc (showString "::"), prt 0 type_])

instance Print Language.Copilot.AbsCopilot.Type where
  prt i = \case
    Language.Copilot.AbsCopilot.PlainType id_ -> prPrec i 0 (concatD [doc (showString "Stream"), prt 0 id_])
    Language.Copilot.AbsCopilot.ArrayType vint -> prPrec i 0 (concatD [doc (showString "Stream"), doc (showString "("), doc (showString "Array"), doc (showString "'"), prt 0 vint, doc (showString ")")])

instance Print Language.Copilot.AbsCopilot.DefBody where
  prt i = \case
    Language.Copilot.AbsCopilot.DefBody def -> prPrec i 0 (concatD [prt 0 def])

instance Print Language.Copilot.AbsCopilot.Def where
  prt i = \case
    Language.Copilot.AbsCopilot.MkDef id_ ids stream localdefs -> prPrec i 0 (concatD [prt 0 id_, prt 0 ids, doc (showString "="), prt 0 stream, prt 0 localdefs])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [Language.Copilot.AbsCopilot.Ident] where
  prt = prtList

instance Print Language.Copilot.AbsCopilot.LocalDefs where
  prt i = \case
    Language.Copilot.AbsCopilot.LocalDefNothing -> prPrec i 0 (concatD [])
    Language.Copilot.AbsCopilot.LocalDefJust deflist -> prPrec i 0 (concatD [doc (showString "where"), prt 0 deflist])

instance Print Language.Copilot.AbsCopilot.DefList where
  prt i = \case
    Language.Copilot.AbsCopilot.DefList0 -> prPrec i 0 (concatD [])
    Language.Copilot.AbsCopilot.DefListN Language.Copilot.AbsCopilot.DefList0 def -> prPrec i 0 (prt 0 def)
    Language.Copilot.AbsCopilot.DefListN deflist def -> prPrec i 0 (concatD [prt 0 deflist, doc (showString ";"), prt 0 def])

instance Print Language.Copilot.AbsCopilot.Stream where
  prt i = \case
    Language.Copilot.AbsCopilot.StreamPar stream -> prPrec i 0 (concatD [doc (showString "("), prt 0 stream, doc (showString ")")])
    Language.Copilot.AbsCopilot.StreamIdent id_ -> prPrec i 0 (concatD [prt 0 id_])
    Language.Copilot.AbsCopilot.ConstStream value -> prPrec i 0 (concatD [doc (showString "constant"), doc (showString "("), prt 0 value, doc (showString ")")])
    Language.Copilot.AbsCopilot.ExternStream str samplev -> prPrec i 0 (concatD [doc (showString "extern"), prt 0 str, prt 0 samplev])
    Language.Copilot.AbsCopilot.StreamAppend valuelist stream -> prPrec i 0 (concatD [prt 0 valuelist, doc (showString "++"), prt 0 stream])
    Language.Copilot.AbsCopilot.StreamDrop vint stream -> prPrec i 0 (concatD [doc (showString "drop"), doc (showString "("), prt 0 vint, doc (showString ")"), prt 0 stream])
    Language.Copilot.AbsCopilot.StreamOP1 opone stream -> prPrec i 0 (concatD [prt 0 opone, prt 0 stream])
    Language.Copilot.AbsCopilot.StreamOP2 stream1 optwo stream2 -> prPrec i 0 (concatD [prt 0 stream1, prt 0 optwo, prt 0 stream2])
    Language.Copilot.AbsCopilot.StreamOP3 opthree stream1 stream2 stream3 -> prPrec i 0 (concatD [prt 0 opthree, prt 0 stream1, prt 0 stream2, prt 0 stream3])
    Language.Copilot.AbsCopilot.StreamStruct stream id_ -> prPrec i 0 (concatD [prt 0 stream, doc (showString "#"), prt 0 id_])

instance Print Language.Copilot.AbsCopilot.SampleV where
  prt i = \case
    Language.Copilot.AbsCopilot.SampleVNothing -> prPrec i 0 (concatD [doc (showString "Nothing")])
    Language.Copilot.AbsCopilot.SampleVJust valuelist -> prPrec i 0 (concatD [doc (showString "("), doc (showString "Just"), prt 0 valuelist, doc (showString ")")])

instance Print Language.Copilot.AbsCopilot.ValueList where
  prt i = \case
    Language.Copilot.AbsCopilot.MkValueList values -> prPrec i 0 (concatD [doc (showString "["), prt 0 values, doc (showString "]")])

instance Print [Language.Copilot.AbsCopilot.Value] where
  prt = prtList

instance Print Language.Copilot.AbsCopilot.Value where
  prt i = \case
    Language.Copilot.AbsCopilot.ValueBool vbool -> prPrec i 0 (concatD [prt 0 vbool])
    Language.Copilot.AbsCopilot.ValueFloat vfloat -> prPrec i 0 (concatD [prt 0 vfloat])
    Language.Copilot.AbsCopilot.ValueInt vint -> prPrec i 0 (concatD [prt 0 vint])
    Language.Copilot.AbsCopilot.ValueArray valuelist -> prPrec i 0 (concatD [doc (showString "array"), prt 0 valuelist])
    Language.Copilot.AbsCopilot.ValueUID id_ fields -> prPrec i 0 (concatD [prt 0 id_, prt 0 fields])
  prtList _ [x] = concatD [doc (showString "("), prt 0 x, doc (showString ")")]
  prtList _ (x:xs) = concatD [doc (showString "("), prt 0 x, doc (showString ")"), doc (showString ","), prt 0 xs]

instance Print [Language.Copilot.AbsCopilot.Field] where
  prt = prtList

instance Print Language.Copilot.AbsCopilot.Field where
  prt i = \case
    Language.Copilot.AbsCopilot.MkField value -> prPrec i 0 (concatD [doc (showString "("), doc (showString "Field"), doc (showString "("), prt 0 value, doc (showString ")"), doc (showString ")")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

